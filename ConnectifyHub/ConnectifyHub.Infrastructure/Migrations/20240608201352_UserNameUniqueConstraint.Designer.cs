// <auto-generated />
using System;
using ConnectifyHub.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Oracle.EntityFrameworkCore.Metadata;

#nullable disable

namespace ConnectifyHub.Infrastructure.Migrations
{
    [DbContext(typeof(ConnectifyContext))]
    [Migration("20240608201352_UserNameUniqueConstraint")]
    partial class UserNameUniqueConstraint
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.31")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            OracleModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Comment", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 2L, 1);

                    b.Property<string>("CommentContent")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("CommentCreateTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("CommentEditTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("CommentorID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("PostID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("ID");

                    b.HasIndex("CommentorID");

                    b.HasIndex("PostID");

                    b.ToTable("COMMENTS", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CommentContent = "Ilk yorum",
                            CommentCreateTime = new DateTime(2024, 6, 8, 23, 13, 51, 960, DateTimeKind.Local).AddTicks(3053),
                            CommentorID = "72cd9cb9-d691-409b-85ec-515c13aa5e61",
                            EntityStatus = 0,
                            PostID = 1
                        });
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Like", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 2L, 1);

                    b.Property<int>("EntityStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("LikeStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("LikedTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("LikerID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("PostID")
                        .HasColumnType("NUMBER(10)");

                    b.HasKey("ID");

                    b.HasIndex("LikerID");

                    b.HasIndex("PostID");

                    b.ToTable("LIKES", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            EntityStatus = 0,
                            LikeStatus = 0,
                            LikedTime = new DateTime(2024, 6, 8, 23, 13, 51, 960, DateTimeKind.Local).AddTicks(3056),
                            LikerID = "b3948e72-9070-4595-863c-dd9d0129a3f3",
                            PostID = 1
                        });
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Message", b =>
                {
                    b.Property<string>("SenderID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ReceiverID")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("ID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("MessageContent")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<DateTime>("ReadTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime>("SendTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("SenderID", "ReceiverID");

                    b.HasIndex("ReceiverID");

                    b.ToTable("MESSAGES", (string)null);
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Post", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 2L, 1);

                    b.Property<DateTime>("CreatedTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("CreatorID")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("CreatorId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<DateTime?>("EditTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<string>("PostContent")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("PostContentImageUrl")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("ID");

                    b.HasIndex("CreatorId");

                    b.ToTable("POSTS", (string)null);

                    b.HasData(
                        new
                        {
                            ID = 1,
                            CreatedTime = new DateTime(2024, 6, 8, 23, 13, 51, 960, DateTimeKind.Local).AddTicks(3044),
                            CreatorID = 1,
                            EntityStatus = 0,
                            PostContent = "Merhaba Dunya",
                            PostContentImageUrl = "hello_world.png"
                        });
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.User", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("BirthDate")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("NVARCHAR2(255)");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("TIMESTAMP(7) WITH TIME ZONE");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("ProfilePhotoUrl")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("NUMBER(1)");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("\"NormalizedUserName\" IS NOT NULL");

                    b.HasIndex("UserName")
                        .IsUnique()
                        .HasFilter("\"UserName\" IS NOT NULL");

                    b.ToTable("ASPNETUSERS", (string)null);

                    b.HasData(
                        new
                        {
                            Id = "60d8e3df-9c1a-4b30-bf52-dbe246538ac3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "d2a70c5b-493f-4636-96d4-c51242d856d9",
                            Email = "yusuf@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Yusuf",
                            LastName = "Ziya",
                            LockoutEnabled = false,
                            NormalizedEmail = "YUSUF@GMAIL.COM",
                            NormalizedUserName = "YZIYA",
                            PasswordHash = "AQAAAAEAACcQAAAAEPYY+TbQ6vV6jDSpGery7yBiXdeROwn9qU7XXq/e4mIv18QK/aKN9jKZVdXf5nQz7Q==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "442b1541-c73a-4f54-afc9-2de2695d7234",
                            TwoFactorEnabled = false,
                            UserName = "yziya"
                        },
                        new
                        {
                            Id = "b3948e72-9070-4595-863c-dd9d0129a3f3",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "46ba43f6-605f-4991-bc8b-6dc9b30a8529",
                            Email = "erkut@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Erkut",
                            LastName = "Ates",
                            LockoutEnabled = false,
                            NormalizedEmail = "ERKUT@GMAIL.COM",
                            NormalizedUserName = "EATES",
                            PasswordHash = "AQAAAAEAACcQAAAAELmLRosmepQ/kWrcNqxe5USvF+jwjbGtoodM4TBUy/kt0QeE9IuYXiW3I/Rc6qCBjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "b5ae825c-e409-4c9b-8834-dbfbaf8ea048",
                            TwoFactorEnabled = false,
                            UserName = "eates"
                        },
                        new
                        {
                            Id = "72cd9cb9-d691-409b-85ec-515c13aa5e61",
                            AccessFailedCount = 0,
                            BirthDate = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            ConcurrencyStamp = "185c936a-a673-432e-967d-e9870a17f603",
                            Email = "husna@gmail.com",
                            EmailConfirmed = false,
                            FirstName = "Husna",
                            LastName = "Kisla",
                            LockoutEnabled = false,
                            NormalizedEmail = "HUSNA@GMAIL.COM",
                            NormalizedUserName = "HKISLA",
                            PasswordHash = "AQAAAAEAACcQAAAAELmLRosmepQ/kWrcNqxe5USvF+jwjbGtoodM4TBUy/kt0QeE9IuYXiW3I/Rc6qCBjg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "e5d3dbe5-6abc-4752-a6f2-c0d7898aa0d8",
                            TwoFactorEnabled = false,
                            UserName = "hkisla"
                        });
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.UserRelationship", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"), 1L, 1);

                    b.Property<string>("ActorID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("AffectedID")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<int>("EntityStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<int>("RelationshipStatus")
                        .HasColumnType("NUMBER(10)");

                    b.Property<DateTime>("RequestTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.Property<DateTime?>("ResponseTime")
                        .HasColumnType("TIMESTAMP(7)");

                    b.HasKey("ID");

                    b.HasIndex("ActorID");

                    b.HasIndex("AffectedID");

                    b.ToTable("USERRELATIONSHIPS", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("NVARCHAR2(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("\"NormalizedName\" IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("NUMBER(10)");

                    OraclePropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"), 1L, 1);

                    b.Property<string>("ClaimType")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Name")
                        .HasColumnType("NVARCHAR2(450)");

                    b.Property<string>("Value")
                        .HasColumnType("NVARCHAR2(2000)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Comment", b =>
                {
                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", "Commentor")
                        .WithMany("Comments")
                        .HasForeignKey("CommentorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.Post", "Post")
                        .WithMany("Comments")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Commentor");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Like", b =>
                {
                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", "Liker")
                        .WithMany("Likes")
                        .HasForeignKey("LikerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.Post", "Post")
                        .WithMany("Likes")
                        .HasForeignKey("PostID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Liker");

                    b.Navigation("Post");
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Message", b =>
                {
                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", "Receiver")
                        .WithMany("ReceivedMessages")
                        .HasForeignKey("ReceiverID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", "Sender")
                        .WithMany("SentMessages")
                        .HasForeignKey("SenderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Post", b =>
                {
                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", "Creator")
                        .WithMany("Posts")
                        .HasForeignKey("CreatorId");

                    b.Navigation("Creator");
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.UserRelationship", b =>
                {
                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", "Actor")
                        .WithMany()
                        .HasForeignKey("ActorID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", "Affected")
                        .WithMany()
                        .HasForeignKey("AffectedID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Actor");

                    b.Navigation("Affected");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("ConnectifyHub.Domain.Entities.Concrete.User", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.Post", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");
                });

            modelBuilder.Entity("ConnectifyHub.Domain.Entities.Concrete.User", b =>
                {
                    b.Navigation("Comments");

                    b.Navigation("Likes");

                    b.Navigation("Posts");

                    b.Navigation("ReceivedMessages");

                    b.Navigation("SentMessages");
                });
#pragma warning restore 612, 618
        }
    }
}
